<!doctype HTML>
<html lang="en">
<head>
    <!--<script src="https://graceba.github.io/MolViewer/aframe.js"></script><!-- Static version -->
    <script src="https://aframe.io/releases/0.7.1/aframe.min.js"></script>
    <script src="https://graceba.github.io/MolViewer/aframe-ar.js"></script>
    <script src="https://rawgit.com/donmccurdy/aframe-extras/master/dist/aframe-extras.loaders.min.js"></script>

    <!-- control scale and rotation -->
    <script src="https://graceba.github.io/MolViewer/hammer.js"></script>
    <script src="https://graceba.github.io/MolViewer/controlHammer.js"></script>

    <title>AR Viewer</title>
    <meta charset="UTF-8">
</head>

<body style="margin : 0px; overflow: hidden;">

    <a-scene id="currentScene" embedded arjs="sourceType: webcam; debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3;" manip>

        <!-- *************************************************************************************************-->
        <!-- Custom js events -->
        <!-- *************************************************************************************************-->

        <script type="text/javascript">
//~~~~~~~~~~ define file sources
            var markersource = "https://graceba.github.io/MolViewer/Markers/";
            var modelsource = "https://graceba.github.io/MolViewer/Models/";
            var extension = ".obj";

            //reset
            function revertMarker(){
                markersource = "https://graceba.github.io/MolViewer/Markers/";
                document.getElementById("markerSourceInput").value = markersource;

                var information = "Marker source: " + markersource;
                document.getElementById('info').innerHTML = information;
            }
            function revertModel() {
                modelsource = "https://graceba.github.io/MolViewer/Models/";
                document.getElementById("modelSourceInput").value = modelsource;

                var information = "Model source " + modelsource;
                document.getElementById('info').innerHTML = information;
            }

            //set
            function setMarkerSource() {
                markersource = document.getElementById("markerSourceInput").value;
                var information = "Marker source: " + markersource;
                document.getElementById('info').innerHTML = information;
            }
            function setModelSource() {
                modelsource = document.getElementById("modelSourceInput").value;
                var information = "Model source: " + modelsource;
                document.getElementById('info').innerHTML = information;
            }

//~~~~~~~~~~ Check for non-existent files
            //patt files
            function trymePATT() {
                var markername = document.getElementById("markerInput").value;
                var marker = markersource + markername + ".patt";
                var http = new XMLHttpRequest();
                http.onload = function () {
                    trymeOBJ(this.status);
                }
                http.open('HEAD', marker, true);
                http.send();
            }
            //obj files
            function trymeOBJ(status) {
                if (status === 200) {
                    var modelname = document.getElementById("modelInput").value;
                    var model = modelsource + modelname + extension;
                    var http = new XMLHttpRequest();
                    http.onload = function () {
                        trymeMTL(this.status);
                    }
                    http.open('HEAD', model, true);
                    http.send();
                }
                else {
                    var information = "Failed to load marker";
                    document.getElementById('info').innerHTML = information;
                }
            }
            //mtl files
            function trymeMTL(status) {
                if (status === 200) {
                    if (extension != ".obj") {
                        selectModel();
                    }
                    else {
                        var modelname = document.getElementById("modelInput").value;
                        var material = modelsource + modelname + ".mtl";
                        var http = new XMLHttpRequest();
                        http.onload = function () {
                            selectModel(this.status);
                        }
                        http.open('HEAD', material, true);
                        http.send();
                    }
                }
                else {
                    var information = "Failed to load model";
                    document.getElementById('info').innerHTML = information;
                }
            }

//~~~~~~~~~~ import a model
            function selectModel(status) {
                //take user input
                var modelname = document.getElementById("modelInput").value;
                var markername = document.getElementById("markerInput").value;
                var marker = markersource + markername + ".patt";

                if(document.getElementById(markername + modelname) == null){ //if the marker location exists and does not already have the called model
                    //*** if marker does not already exist, create it. ***
                    if (document.getElementById(markername) == null) {
                        //create a new a-marker element
                        var a_marker = document.createElement("a-marker");
                        var element = document.getElementById("currentScene");
                        element.appendChild(a_marker);
                        //set id as marker name
                        a_marker.setAttribute('id', markername);
                        // set the preset
                        a_marker.setAttribute('preset', 'custom');
                        // set the type
                        a_marker.setAttribute('type', 'pattern');
                        // set the url
                        a_marker.setAttribute('url', marker);
                    }

                    //*** set model on marker ***
                    //load model
                    var object = modelsource + modelname + extension;
                    //create a model entity for the marker
                    var a_entity = document.createElement("a-entity");
                    var element = document.getElementById(markername);
                    element.appendChild(a_entity);
                    //set id as index
                    a_entity.setAttribute('id', markername + modelname);
                    //import empty model
                    if (extension == ".obj") {
                        var material = "https://graceba.github.io/MolViewer/Models/blank.mtl"
                        var information = "Loading blank " + modelname + " on " + markername;
                        document.getElementById('info').innerHTML = information;
                        if (status === 200) {
                            material = modelsource + modelname + ".mtl";
                        }
                        a_entity.setAttribute("obj-model", "obj: url(" + object + "); mtl: url(" + material + ");");
                    }
                    else if (extension == ".gltf") {
                        a_entity.setAttribute("gltf-model", "url(" + object + ");");
                        a_entity.setAttribute("animation-mixer", '');
                    }
                    //set the shadow
                    a_entity.setAttribute("shadow", "receive: false");
                    //set the position
                    var offset = "1 1 1";
                    var manualOffset = document.getElementById("manualOffset").value;
                    if (manualOffset != "") {
                        if (manualOffset.indexOf(' ') < 0) { //if it is a given number, set as height
                            offset = manualOffset + " " + manualOffset + " " + manualOffset;
                        }
                        else {
                            offset = manualOffset;
                        }
                    }
                    a_entity.setAttribute("position", "0 1 0");
                    //set the scale
                    a_entity.setAttribute("scale", offset);
                    //set the rotation
                    a_entity.setAttribute("rotation", "0 0 0");

                    var information = "Loading " + modelname + " on " + markername;
                    document.getElementById('info').innerHTML = information;
                }
                else {
                    var information = "Model load already attempted on this marker";
                    document.getElementById('info').innerHTML = information;
                }
            }

//~~~~~~~~~~ remove selected model
            function hideModel() {
                var markername = document.getElementById("markerInput").value;
                var modelname = document.getElementById("modelInput").value;
                //define the selected marker
                var identity = markername + modelname;
                if(document.getElementById(identity)) {
                    var element = document.getElementById(identity);
                    element.parentNode.removeChild(element);
                }
                var information = "Removing " + modelname + " from " + markername;
                document.getElementById('info').innerHTML = information;
            }

//~~~~~~~~~~ clear all models from a marker
            function clearMarker() {
                var markername = document.getElementById("markerInput").value;
                if (!(document.getElementById(markername))) {
                    var information = markername + " is not an active marker";
                    document.getElementById('info').innerHTML = information;
                }
                var i;
                var currentInstances = document.getElementById(markername).getElementsByTagName('a-entity').length
                if (currentInstances == 0) {
                    var information = markername + " is not an active marker";
                    document.getElementById('info').innerHTML = information;
                }
                else {
                    for (i = 0; i < currentInstances; i++) {
                        var identity = document.getElementById(markername).getElementsByTagName('a-entity')[0].id;
                        var element = document.getElementById(identity);
                        element.parentNode.removeChild(element);
                    }
                    var information = "Clearing " + markername;
                    document.getElementById('info').innerHTML = information;
                }
            }

//~~~~~~~~~~ reset all markers to default position
            function orient() {
                var markername = document.getElementById("markerInput").value;
                var i;
                if (!(document.getElementById(markername))) {
                    var information = markername + " is not an active marker";
                    document.getElementById('info').innerHTML = information;
                }
                else {
                    var currentInstances = document.getElementById(markername).getElementsByTagName('a-entity').length
                    if (currentInstances == 0) {
                        var information = markername + " is not an active marker";
                        document.getElementById('info').innerHTML = information;
                    }
                    else {
                        for (i = 0; i < currentInstances; i++) {
                            var identity = document.getElementById(markername).getElementsByTagName('a-entity')[i].id;
                            var element = document.getElementById(identity);
                            element.setAttribute("rotation", "0 0 0");
                            element.setAttribute("position", "0 1 0");
                            element.setAttribute("scale", "1 1 1");
                        }
                        document.getElementById("manualOffset").value = "";
                        var information = "Realigning " + markername;
                        document.getElementById('info').innerHTML = information;
                    }
                }
            }
//~~~~~~~~~~ change height of specified model
            function setScale() {
                var markername = document.getElementById("markerInput").value;

                var i;
                var currentInstances = document.getElementById(markername).getElementsByTagName('a-entity').length
                if (!document.getElementById('sync').checked) {
                    currentInstances = 1;
                    var modelname = document.getElementById('modelInput').value;
                    var model = document.getElementById(markername + modelname);
                    if (!model) { return; }
                }
                for (i = 0; i < currentInstances; i++) {
                    if (document.getElementById('sync').checked) {
                        var identity = document.getElementById(markername).getElementsByTagName('a-entity')[i].id;
                        var model = document.getElementById(identity);
                    }
                    var offset = "1 1 1";
                    var manualOffset = document.getElementById("manualOffset").value;
                    if (manualOffset != "") {
                        if (manualOffset.indexOf(' ') < 0) { //if it is a given number, set as height
                            offset = manualOffset + " " + manualOffset + " " + manualOffset;
                        }
                        else {
                            offset = manualOffset;
                        }
                    }
                    model.setAttribute("scale", offset);
                    var information = "Adjusted scale";
                    document.getElementById('info').innerHTML = information;
                }
            }

//~~~~~~~~~~ user-friendly movement (on-screen arrow control)
            function move(direction) {
                var markername = document.getElementById("markerInput").value;

                var i;
                var currentInstances = document.getElementById(markername).getElementsByTagName('a-entity').length
                if (!document.getElementById('sync').checked) {
                    currentInstances = 1;
                    var modelname = document.getElementById('modelInput').value;
                    var model = document.getElementById(markername + modelname);
                    if (!model) { return; }
                }
                for (i = 0; i < currentInstances; i++) {
                    if (document.getElementById('sync').checked) {
                        var identity = document.getElementById(markername).getElementsByTagName('a-entity')[i].id;
                        var model = document.getElementById(identity);
                    }
                    var pos = model.getAttribute('position');
                    var scal = model.getAttribute('scale');
                    if (direction == "grow") {
                        scal = { x: scal.x*1.1, y: scal.y*1.1, z: scal.z*1.1 };
                    }
                    else if (direction == "shrink") {
                        scal = { x: scal.x*0.9, y: scal.y*0.9, z: scal.z*0.9};
                    }
                    else if (direction == "up") {
                        pos.z = pos.z - 0.2;
                    }
                    else if (direction == "down") {
                        pos.z = pos.z + 0.2;
                    }
                    else if (direction == "left") {
                        pos.x = pos.x - 0.2;
                    }
                    else if (direction == "right") {
                        pos.x = pos.x + 0.2;
                    }
                    else if (direction == "plus") {
                        pos.y = pos.y + 0.2;
                    }
                    else if (direction == "minus") {
                        pos.y = pos.y - 0.2;
                    }
                    model.setAttribute('position', pos);
                    model.setAttribute('scale', scal);
                }
            }

//~~~~~~~~~~ change the file type to be loaded
            function setExtension(value) {
                extension = value;
                information = "Now loading " + value + " files";
                document.getElementById('info').innerHTML = information;
            }
        </script>

        <!-- *************************************************************************************************-->
        <!-- CSS Style -->
        <!-- *************************************************************************************************-->
        <style>
            /*Collapsible menu style*/
            .collapsible {
                background-color: #777;
                color: white;
                cursor: pointer;
                padding: 10px;
                width: 100%;
                border: none;
                text-align: left;
                outline: none;
                font-size: 15px;
                float: right;
            }

                .active, .collapsible:hover {
                    background-color: #555;
                }

                .collapsible:after {
                    content: '\002B';
                    color: white;
                    font-weight: bold;
                    float: right;
                    margin-left: 5px;
                }

            .active:after {
                content: "\2212";
            }

            .content {
                padding: 0 18px;
                max-height: 0;
                overflow: hidden;
                transition: max-height 0.2s ease-out;
                background-color: #f1f1f1;
            }

            @media(max-width: 770px) {
                .menu {
                    position: fixed;
                    top: 10px;
                    right: 0px;
                    width: 95%;
                    text-align: left;
                }
            }

            @media(min-width: 770px) {
                .menu {
                    position: fixed;
                    top: 10px;
                    right: 0px;
                    width: 270px;
                    text-align: left;
                }
            }

            .sidebar {
                background-color: #333;
                color: white;
                cursor: pointer;
                padding: 10px;
                width: 30%;
                border: none;
                text-align: left;
                outline: none;
                float: right;
                font-size: 15px;
                top: 0px;
            }


                .active1, .sidebar:hover {
                    background-color: #333;
                    width: 30%;
                }

                .sidebar:after {
                    content: '\002B';
                    color: white;
                    font-weight: bold;
                    float: right;
                    margin-left: 5px;
                }

            .sidecontent {
                height: 100%;
                width: 100%;
                max-height: 0;
                overflow: hidden;
                transition: max-height 0.2s ease-out;
                background-color: #f1f1f1;
            }

            .active1:after {
                content: "\2212";
            }

            .control {
                font-family: Courier New, Courier, monospace;
            }

            p {
                padding: 3px;
            }
        </style>

        <!-- *************************************************************************************************-->
        <!-- Display -->
        <!-- *************************************************************************************************-->
        <!-- Default image -->
        <!-- .obj -->
        <a-marker id="hex" preset="custom" type="pattern" url="https://graceba.github.io/MolViewer/Markers/hex.patt">
            <a-entity obj-model="obj: url(https://graceba.github.io/MolViewer/Models/dna_chainA.obj); mtl: url(https://graceba.github.io/MolViewer/Models/dna_chainA.mtl);" shadow="receive: false;" position="0 1 0" rotation="0 0 0" scale="1 1 1" id="hexdna_chainA"></a-entity>
            <a-entity obj-model="obj: url(https://graceba.github.io/MolViewer/Models/dna_chainB.obj); mtl: url(https://graceba.github.io/MolViewer/Models/dna_chainB.mtl);" shadow="receive: false;" position="0 1 0" rotation="0 0 0" scale="1 1 1" id="hexdna_chainB"></a-entity>
        </a-marker> <!---->

        <!-- .glFT
        <a-marker id="smiley" preset="custom" type="pattern" url="https://graceba.github.io/MolViewer/Markers/smiley.patt">
            <a-entity gltf-model="scr: url(https://graceba.github.io/MolViewer/Models/drone.gltf)" shadow="receive: false;" position="0 1 0" rotation="0 0 0" scale="0.005 0.005 0.005" id="smileydrone" animation-mixer></a-entity>
        </a-marker> <!---->

        <!-- display information onscreen -->
        <div style='position: fixed; bottom: 10px; left: 10px; width:100%; text-align: left; z-index: 4; color: white;'>
            <a id="info"></a>
        </div>

        <!-- Initiate camera -->
        <a-entity camera></a-entity>

    </a-scene>

    <!-- *************************************************************************************************-->
    <!-- Information and detailed menu -->
    <!-- *************************************************************************************************-->
    <div class="menu">
        <button class="sidebar">Menu</button>
        <div class="sidecontent">

            <button class="collapsible">How to</button>
            <div class="content">
                <p>
                    <a href="https://GraceBa.github.io/MolViewer/HowTo.html" target="_blank">Loading a model</a><br />
                    <a href="https://GraceBa.github.io/MolViewer/HowTo.html#changingSources" target="_blank">Changing sources</a><br />
                </p>
            </div>

            <button class="collapsible">Load model</button>
            <div class="content">
                <p>
                    <label style="display: inline-block; width: 55px;">Marker: </label><input type="text" id="markerInput" value="hex" style="display: inline-block;" /> <br />
                    <label style="display: inline-block; width: 55px; padding-bottom: 5px">Model: </label><input type="text" id="modelInput" value="dna_chainA" style="display: inline-block;" /> <br />
                    <!-- Buttons -->
                    <input onclick="trymePATT()" type="button" value="import model" id="selectButton" style="width: 120px;" />
                    &emsp;  <input class="control" onclick="move('up')" type="button" value="-z" id="upButton" />
                            <input class="control" onclick="move('grow')" type="button" value="+" id="growButton" style="float: right;"/> <br/>
                    <input onclick="hideModel()" type="button" value="remove model" id="hideButton" style="width: 120px;" />
                            <input class="control" onclick="move('left')" type="button" value="-x" id="leftButton" />
                            <input class="control" onclick="move('right')" type="button" value="+x" id="rightButton" />
                            <input class="control" onclick="move('shrink')" type="button" value="-" id="shrinkButton" style="float: right;"/> <br/>
                    <input onclick="clearMarker()" type="button" value="clear marker" id="clearButton" style="width: 120px;" />
                    &emsp;  <input class="control" onclick="move('down')" type="button" value="+z" id="downButton" /> 
                            <input type="checkbox" id="sync" checked style="float: right;" /></br>
                    <label style="display: inline-block; padding-top: 5px;">Scale: </label> <input type="text" id="manualOffset" value="" style="width: 35px" />
                    <input onclick="setScale()" type="button" value="set" id="offsetButton" />
                            <input class="control" onclick="move('minus')" type="button" value="-y" id="minusButton" />
                            <input class="control" onclick="move('plus')" type="button" value="+y" id="plusButton" /><br/>
                    <label style="display: inline-block; padding-top: 5px">Reset marker orientation:</label> <input onclick="orient()" type="button" value="reset" id="offsetButton" /> <br />
                </p>
                <script>
                    // recognise text submission via Enter key -> For adding markers
                    var pressEnter = document.getElementById("modelInput");
                    pressEnter.addEventListener("keyup", function (event) {
                        if (event.keyCode === 13) {
                            document.getElementById("selectButton").click();
                        }
                    });

                    var pressEnter1 = document.getElementById("markerInput");
                    pressEnter1.addEventListener("keyup", function (event) {
                        if (event.keyCode === 13) {
                            document.getElementById("selectButton").click();
                        }
                    });

                    var pressEnter1 = document.getElementById("manualOffset");
                    pressEnter1.addEventListener("keyup", function (event) {
                        if (event.keyCode === 13) {
                            document.getElementById("offsetButton").click();
                        }
                    });
                </script>
            </div>

            <button class="collapsible">Change source</button>
            <div class="content">
                <p>
                    File type: <br />
                    <input onclick="setExtension('.obj')" type="button" value=".obj" id="objButton">
                    <input onclick="setExtension('.gltf')" type="button" value=".gltf" id="gltfButton"> <br />

                    Set marker source: <input type="text" id="markerSourceInput" value="" /> <br />
                    <input onclick="setMarkerSource()" type="button" value="set marker source" id="markerSourceButton" style="width: 55%;"> <br />
                    <input onclick="revertMarker()" type="button" value="revert" id="revertMarkerButton" style="width: 55%;"> <br />

                    Set model source: <input type="text" id="modelSourceInput" value="" /> <br />
                    <input onclick="setModelSource()" type="button" value="set model source" id="modelSourceButton" style="width: 55%;"> <br />
                    <input onclick="revertModel()" type="button" value="revert" id="revertModelButton" style="width: 55%;"> <br />

                </p>
            </div>
        </div>
        <script>
                // control the collapsing menu
                var coll = document.getElementsByClassName("collapsible");
                var x;

                for (x = 0; x < coll.length; x++) {
                    coll[x].addEventListener("click", function () {
                        this.classList.toggle("active");
                        var content = this.nextElementSibling;
                        if (content.style.maxHeight) {
                            content.style.maxHeight = null;
                        } else {
                            content.style.maxHeight = content.scrollHeight + "px";
                        }
                    });
                }

                document.getElementsByClassName("sidebar")[0].addEventListener("click", function () {
                    this.classList.toggle("active1");
                    var sidecontent = this.nextElementSibling;
                    if (sidecontent.style.maxHeight) {
                        sidecontent.style.maxHeight = null;
                    } else {
                        sidecontent.style.maxHeight = "100%";
                    }
                });

        </script>
    </div>

</body>
</html>
